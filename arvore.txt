Vamos criar árvores binárias de busca para as duas listas dadas. Em seguida, adicionaremos um valor em cada árvore e removeremos um nó, sendo que em pelo menos uma árvore a remoção será de um nó com dois filhos.

Primeiro, vamos definir a estrutura de um nó da árvore:

```python
class No:
    def __init__(self, valor):
        self.valor = valor
        self.esquerda = None
        self.direita = None
```

Agora, vamos criar as funções para adicionar um valor e remover um nó:

```python
def adicionar_valor(raiz, valor):
    if raiz is None:
        return No(valor)
    
    if valor < raiz.valor:
        raiz.esquerda = adicionar_valor(raiz.esquerda, valor)
    elif valor > raiz.valor:
        raiz.direita = adicionar_valor(raiz.direita, valor)
    
    return raiz

def encontrar_minimo(no):
    while no.esquerda is not None:
        no = no.esquerda
    return no

def remover_no(raiz, valor):
    if raiz is None:
        return raiz
    
    if valor < raiz.valor:
        raiz.esquerda = remover_no(raiz.esquerda, valor)
    elif valor > raiz.valor:
        raiz.direita = remover_no(raiz.direita, valor)
    else:
        # Caso com um filho ou nenhum filho
        if raiz.esquerda is None:
            return raiz.direita
        elif raiz.direita is None:
            return raiz.esquerda

        # Caso com dois filhos: encontrar o sucessor in-order (menor valor na subárvore direita)
        raiz.valor = encontrar_minimo(raiz.direita).valor
        raiz.direita = remover_no(raiz.direita, raiz.valor)

    return raiz
```

Agora, criaremos as árvores para as listas fornecidas, adicionaremos um valor e removeremos um nó:

```python
def criar_arvore(lista):
    raiz = None
    for valor in lista:
        raiz = adicionar_valor(raiz, valor)
    return raiz

def imprimir_in_order(raiz):
    if raiz:
        imprimir_in_order(raiz.esquerda)
        print(raiz.valor, end=' ')
        imprimir_in_order(raiz.direita)

# Lista1
lista1 = [45, 20, 30, 60, 81, 97, 100, 7, 8, 4]
arvore1 = criar_arvore(lista1)
print("Árvore1 antes da remoção:")
imprimir_in_order(arvore1)

# Adicionar valor
arvore1 = adicionar_valor(arvore1, 50)
print("\nÁrvore1 após adicionar 50:")
imprimir_in_order(arvore1)

# Remover nó
arvore1 = remover_no(arvore1, 60)
print("\nÁrvore1 após remover nó com dois filhos (60):")
imprimir_in_order(arvore1)


# Lista2
lista2 = [15, 6, 18, 3, 7, 16, 20, 4]
arvore2 = criar_arvore(lista2)
print("\n\nÁrvore2 antes da remoção:")
imprimir_in_order(arvore2)

# Adicionar valor
arvore2 = adicionar_valor(arvore2, 25)
print("\nÁrvore2 após adicionar 25:")
imprimir_in_order(arvore2)

# Remover nó
arvore2 = remover_no(arvore2, 18)
print("\nÁrvore2 após remover nó sem dois filhos (18):")
imprimir_in_order(arvore2)
```

Essas funções criam as árvores, adicionam um valor a cada uma e removem um nó, sendo que em pelo menos uma árvore a remoção é de um nó com dois filhos. O código também imprime as árvores antes e depois das operações para visualização.